import traceback
from fastapi import Depends, HTTPException, status
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from sqlalchemy.orm import Session
from .database import get_db
from .models.user import User
from .services.auth_service import AuthService

auth_service = AuthService()
security = HTTPBearer()

def get_current_user(
    credentials: HTTPAuthorizationCredentials = Depends(security),
    db: Session = Depends(get_db)
) -> User:
    token = credentials.credentials
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–∫ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π JWT —Ç–æ–∫–µ–Ω
    username = auth_service.verify_token(token)
    if username:
        user = auth_service.get_user_by_username(db, username)
        if user:
            return user
    
    # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º –∫–∞–∫ Clerk —Ç–æ–∫–µ–Ω
    print(f"üîç Trying Clerk token verification...")
    if auth_service.clerk_service.is_configured():
        try:
            print(f"‚úÖ ClerkService is configured")
            print(f"üîë Clerk public key: {auth_service.clerk_service.publishable_key[:30]}...")
            print(f"üîó JWKS URL: {auth_service.clerk_service.jwks_url}")
            
            print(f"üéØ Verifying Clerk token: {token[:20]}...")
            payload = auth_service.clerk_service.verify_token(token)
            print(f"üì¶ Clerk token payload: {payload}")

            if not payload:
                 raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid Clerk token payload")

            user_info = auth_service.clerk_service.extract_user_info(payload)
            clerk_id = user_info.get("clerk_id")
            
            if not clerk_id:
                raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Clerk ID not found in token")

            # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
            user = auth_service.get_user_by_clerk_id(db, clerk_id)
            
            if not user:
                print(f"üßê User with Clerk ID {clerk_id} not found in DB. Trying to find by email or create.")
                # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ email, —á—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã
                email = user_info.get("email")
                if email:
                    user = auth_service.get_user_by_email(db, email)
                    if user:
                        print(f"ü§ù Found user by email {email}. Linking to Clerk ID {clerk_id}.")
                        user.clerk_id = clerk_id
                        user.provider = "clerk"
                        db.commit()
                        return user

                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –Ω–∏ –ø–æ clerk_id, –Ω–∏ –ø–æ email - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
                print(f"‚ûï Creating new user for Clerk ID {clerk_id} and email {email}")
                user = auth_service.create_or_update_clerk_user(
                    db=db,
                    clerk_id=clerk_id,
                    email=user_info["email"],
                    name=user_info.get("name"),
                    username=user_info.get("username"),
                    avatar_url=user_info.get("picture"),
                    email_verified=user_info.get("email_verified", False)
                )
                print(f"‚úÖ Created new Clerk user: {user.email}")
            
            if user:
                return user

        except HTTPException as e:
            # –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º HTTP –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Ö –¥–∞–ª—å—à–µ
            print(f"‚úã HTTP exception during Clerk auth: {e.detail}")
            raise e
        except Exception as e:
            # –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –í–°–ï –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏, —á—Ç–æ–±—ã —Å–µ—Ä–≤–µ—Ä –Ω–µ –ø–∞–¥–∞–ª
            tb_str = traceback.format_exc()
            print(f"‚ùå CRITICAL: Unhandled exception in get_current_user (Clerk flow):\n{tb_str}")
            raise HTTPException(
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                detail=f"An unexpected error occurred during authentication. Please check server logs. Error: {str(e)}"
            )
    else:
        print(f"‚ùå ClerkService is not configured")
    
    # –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –º–µ—Ç–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
    raise HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω",
        headers={"WWW-Authenticate": "Bearer"},
    ) 