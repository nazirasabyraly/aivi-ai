from fastapi import Depends, HTTPException, status
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from sqlalchemy.orm import Session
from .database import get_db
from .models.user import User
from .services.auth_service import AuthService

auth_service = AuthService()
security = HTTPBearer()

def get_current_user(
    credentials: HTTPAuthorizationCredentials = Depends(security),
    db: Session = Depends(get_db)
) -> User:
    token = credentials.credentials
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–∫ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π JWT —Ç–æ–∫–µ–Ω
    username = auth_service.verify_token(token)
    if username:
        user = auth_service.get_user_by_username(db, username)
        if user:
            return user
    
    # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º –∫–∞–∫ Clerk —Ç–æ–∫–µ–Ω
    print(f"üîç Trying Clerk token verification...")
    if auth_service.clerk_service.is_configured():
        print(f"‚úÖ ClerkService is configured")
        print(f"üîë Clerk public key: {auth_service.clerk_service.publishable_key[:30]}...")
        print(f"üîó JWKS URL: {auth_service.clerk_service.jwks_url}")
        try:
            print(f"üéØ Verifying Clerk token: {token[:20]}...")
            payload = auth_service.clerk_service.verify_token(token)
            print(f"üì¶ Clerk token payload: {payload}")
            if payload:
                user_info = auth_service.clerk_service.extract_user_info(payload)
                clerk_id = user_info.get("clerk_id")
                
                if clerk_id:
                    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Clerk ID
                    user = auth_service.get_user_by_clerk_id(db, clerk_id)
                    
                    if user:
                        print(f"‚úÖ Found existing Clerk user: {user.email}")
                        return user
                    
                    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                    if user_info.get("email"):
                        print(f"üìù Creating new Clerk user: {user_info['email']}")
                        user = auth_service.create_or_update_clerk_user(
                            db=db,
                            clerk_id=clerk_id,
                            email=user_info["email"],
                            name=user_info.get("name"),
                            username=user_info.get("username"),
                            avatar_url=user_info.get("picture"),
                            email_verified=user_info.get("email_verified", False)
                        )
                        print(f"‚úÖ Created Clerk user in DB: {user.email} (ID: {user.id})")
                        return user
        except HTTPException as e:
            # Clerk —Ç–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
            print(f"‚ùå Clerk token verification failed: {e}")
            pass
        except Exception as e:
            print(f"‚ùå Unexpected error in Clerk verification: {e}")
            pass
    else:
        print(f"‚ùå ClerkService is not configured")
    
    # –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –º–µ—Ç–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
    raise HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω",
        headers={"WWW-Authenticate": "Bearer"},
    ) 