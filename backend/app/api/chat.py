from fastapi import APIRouter, UploadFile, File, HTTPException, Depends, status, Form, BackgroundTasks
from fastapi.responses import JSONResponse, FileResponse
from typing import Dict, Any, List
import json
import uuid
import time
import aiohttp
from ..services.openai_service import OpenAIService
from ..config import MAX_FILE_SIZE, ALLOWED_EXTENSIONS
from ..dependencies import get_current_user
from sqlalchemy.orm import Session
from ..database import get_db
from ..models.user import SavedSong, User, ChatMessage
from ..schemas import ChatMessageCreate, ChatMessageOut, GenerateBeatRequest, GenerateBeatResponse, GenerateBeatStatusRequest, RecommendationsRequest
import asyncio
import os
import requests

router = APIRouter(tags=["chat"])

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
openai_service = OpenAIService()

AUDIO_CACHE_DIR = "audio_cache"
os.makedirs(AUDIO_CACHE_DIR, exist_ok=True)

@router.post("/analyze-media")
async def analyze_media(
    file: UploadFile = File(...),
    user_id: str = Form(None),
    language: str = Form("ru"),  # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –∏–∑ FormData
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –º–µ–¥–∏–∞—Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        from ..services.auth_service import AuthService
        auth_service = AuthService()
        auth_service.check_usage_limit(db, current_user)
        
        print(f"üîç –ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª: {file.filename}, —Ä–∞–∑–º–µ—Ä: {file.size}, —Ç–∏–ø: {file.content_type}, —è–∑—ã–∫: {language}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        if file.size and file.size > MAX_FILE_SIZE:
            raise HTTPException(status_code=400, detail="–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º 10MB)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        if file.filename:
            file_ext = '.' + file.filename.split('.')[-1].lower()
            print(f"üìÅ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: {file_ext}")
            print(f"‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è: {ALLOWED_EXTENSIONS}")
            
            if file_ext not in ALLOWED_EXTENSIONS:
                raise HTTPException(
                    status_code=400, 
                    detail=f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã: {', '.join(ALLOWED_EXTENSIONS)}"
                )
        
        print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞...")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª —Å —É—á–µ—Ç–æ–º —è–∑—ã–∫–∞
        analysis = await openai_service.analyze_media_mood(file, language=language)
        
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞: {analysis}")
        
        if "error" in analysis:
            raise HTTPException(status_code=500, detail=analysis["error"])
        
        return JSONResponse(content=analysis)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ analyze_media: {str(e)}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞: {str(e)}")

@router.post("/get-recommendations")
async def get_music_recommendations(
    mood_analysis: Dict[str, Any],
    language: str = "ru",  # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä —è–∑—ã–∫–∞
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–≤–µ –ø–æ–¥–±–æ—Ä–∫–∏: 5 –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö (–ø–æ saved_songs) –∏ 5 –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö (–ø–æ mood_analysis)
    """
    try:
        global_prefs = {
            "top_genres": ["pop", "electronic", "indie"],
            "top_artists": ["The Weeknd", "Dua Lipa", "Post Malone"],
            "top_tracks": ["Blinding Lights", "Levitating", "Circles"]
        }
        saved_songs = db.query(SavedSong).filter(SavedSong.user_id == current_user.id).all()
        personal_prefs = {
            "top_genres": [],
            "top_artists": list({s.artist for s in saved_songs if s.artist}),
            "top_tracks": list({s.title for s in saved_songs if s.title})
        } if saved_songs else global_prefs
        print(f"[RECOMMEND] mood_analysis: {mood_analysis}, language: {language}")
        print(f"[RECOMMEND] personal_prefs: {personal_prefs}")
        try:
            print("[RECOMMEND] –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —É OpenAI...")
            global_task = openai_service.get_music_recommendations(mood_analysis, global_prefs, n_tracks=5, language=language)
            personal_task = openai_service.get_music_recommendations(mood_analysis, personal_prefs, n_tracks=5, language=language)
            global_rec, personal_rec = await asyncio.wait_for(
                asyncio.gather(global_task, personal_task), timeout=60.0
            )
            print(f"[RECOMMEND] –û—Ç–≤–µ—Ç OpenAI: global={global_rec}, personal={personal_rec}")
            return JSONResponse(content={
                "global": global_rec["recommendations"],
                "personal": personal_rec["recommendations"],
                "ask_feedback": True
            })
        except asyncio.TimeoutError:
            print("[RECOMMEND] Timeout –æ—Ç OpenAI! –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É.")
            raise HTTPException(status_code=500, detail="OpenAI API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except Exception as e:
            print(f"[RECOMMEND] –û—à–∏–±–∫–∞ OpenAI: {e}")
            raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –æ—Ç OpenAI: {str(e)}")
    except Exception as e:
        print(f"[RECOMMEND] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {str(e)}")

@router.post("/chat")
async def chat_with_ai(
    message: str,
    mood_analysis: Dict[str, Any] = None,
    user_id: str = None
):
    """
    –û–±—â–∏–π —á–∞—Ç —Å –ò–ò –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –º—É–∑—ã–∫–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
    """
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ò–ò
        context = f"""
        –¢—ã –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–µ—Ä—Ç –∏ –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–æ–¥–±–æ—Ä—É –º—É–∑—ã–∫–∏. 
        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª: "{message}"
        """
        
        if mood_analysis:
            context += f"""
            –ö–æ–Ω—Ç–µ–∫—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è:
            - –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {mood_analysis.get('mood', 'neutral')}
            - –û–ø–∏—Å–∞–Ω–∏–µ: {mood_analysis.get('description', '')}
            - –≠–º–æ—Ü–∏–∏: {mood_analysis.get('emotions', [])}
            """
        
        context += """
        –û—Ç–≤–µ—Ç—å –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –ø–æ–º–æ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –º—É–∑—ã–∫–∞–ª—å–Ω—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏.
        –ú–æ–∂–µ—à—å –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∂–∞–Ω—Ä—ã, –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –∏–ª–∏ –æ–±—Å—É–¥–∏—Ç—å –º—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è.
        """
        
        # –í—ã–±–∏—Ä–∞–µ–º –º–æ–¥–µ–ª—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        if openai_service.use_azure:
            model = openai_service.deployment_name
        else:
            model = "gpt-4"
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
        response = openai_service.client.chat.completions.create(
            model=model,
            messages=[
                {"role": "system", "content": "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–µ—Ä—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –ª—é–¥—è–º –Ω–∞—Ö–æ–¥–∏—Ç—å –º—É–∑—ã–∫—É –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é."},
                {"role": "user", "content": context}
            ],
            max_tokens=300
        )
        
        ai_response = response.choices[0].message.content
        
        return JSONResponse(content={
            "success": True,
            "response": ai_response,
            "message": message
        })
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —á–∞—Ç–∞: {str(e)}")

@router.get("/supported-formats")
async def get_supported_formats():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ñ–∞–π–ª–æ–≤
    """
    return JSONResponse(content={
        "supported_formats": list(ALLOWED_EXTENSIONS),
        "max_file_size_mb": MAX_FILE_SIZE // (1024 * 1024)
    })

@router.get('/history', response_model=List[ChatMessageOut])
def get_chat_history(db: Session = Depends(get_db), current_user: User = Depends(get_current_user)):
    return db.query(ChatMessage).filter(ChatMessage.user_id == current_user.id).order_by(ChatMessage.timestamp).all()

@router.post('/history', response_model=ChatMessageOut)
def add_chat_message(msg: ChatMessageCreate, db: Session = Depends(get_db), current_user: User = Depends(get_current_user)):
    db_msg = ChatMessage(user_id=current_user.id, **msg.dict())
    db.add(db_msg)
    db.commit()
    db.refresh(db_msg)
    return db_msg

@router.delete('/history', status_code=status.HTTP_204_NO_CONTENT)
def delete_chat_history(db: Session = Depends(get_db), current_user: User = Depends(get_current_user)):
    db.query(ChatMessage).filter(ChatMessage.user_id == current_user.id).delete()
    db.commit()
    return None

async def _run_riffusion_generation(prompt: str, request_id: str):
    """
    –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –º—É–∑—ã–∫–∏.
    """
    try:
        print(f"üéµ [BG] Starting generation for request_id: {request_id}, prompt: {prompt}")
        
        RIFFUSION_API_KEY = os.getenv("RIFFUSION_API_KEY")
        if not RIFFUSION_API_KEY:
            print("‚ùå RIFFUSION_API_KEY –Ω–µ –∑–∞–¥–∞–Ω –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏")
            with open(os.path.join(AUDIO_CACHE_DIR, f"{request_id}.error"), "w") as f:
                f.write("Server not configured for music generation.")
            return

        # --- 1. –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é ---
        url = "https://api.riffusion.com/v1/generate"  # Updated API endpoint
        headers = {
            "accept": "application/json",
            "x-api-key": RIFFUSION_API_KEY,
            "Content-Type": "application/json"
        }
        data = {
            "prompt": prompt,
            "seed": -1,  # Let the API choose a random seed
            "denoising": 0.75,
            "guidance": 7.0
        }

        print(f"üéµ [BG] Sending initial request to Riffusion API...")
        response = requests.post(url, headers=headers, json=data, timeout=30)
        print(f"üéµ [BG] Initial response status: {response.status_code}")
        
        if response.status_code != 200:
            error_text = response.text
            print(f"‚ùå [BG] API Error: {error_text}")
            with open(os.path.join(AUDIO_CACHE_DIR, f"{request_id}.error"), "w") as f:
                f.write(f"API Error: {error_text}")
            return
            
        initial_result = response.json()
        print(f"üéµ [BG] Initial response: {initial_result}")
        
        # Get the task ID from the response
        task_id = initial_result.get("id")
        if not task_id:
            print("‚ùå [BG] No task_id in response")
            with open(os.path.join(AUDIO_CACHE_DIR, f"{request_id}.error"), "w") as f:
                f.write("Failed to get task_id from API")
            return

        # --- 2. –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (Polling) ---
        status_url = f"https://api.riffusion.com/v1/status/{task_id}"
        start_time = time.time()
        max_wait_time = 300  # 5 minutes timeout
        
        while time.time() - start_time < max_wait_time:
            time.sleep(5)
            elapsed = int(time.time() - start_time)
            print(f"üéµ [BG] Checking status for task_id: {task_id} (elapsed: {elapsed}s)")
            
            # Save progress status
            with open(os.path.join(AUDIO_CACHE_DIR, f"{request_id}.status"), "w") as f:
                f.write(json.dumps({
                    "status": "generating",
                    "elapsed": elapsed,
                    "progress": min(int((elapsed / max_wait_time) * 100), 95)
                }))
            
            status_resp = requests.get(status_url, headers=headers, timeout=30)
            print(f"üéµ [BG] Status check response: {status_resp.status_code}")
            
            if status_resp.status_code == 200:
                status_result = status_resp.json()
                print(f"üéµ [BG] Status result: {status_result}")
                
                if status_result.get("status") == "completed":
                    audio_url = status_result.get("audio_url")
                    if audio_url:
                        print(f"üéµ [BG] Audio URL received: {audio_url}")
                        # --- 3. –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ ---
                        audio_resp = requests.get(audio_url, timeout=120)
                        if audio_resp.status_code == 200:
                            filename = f"{request_id}.mp3"
                            file_path = os.path.join(AUDIO_CACHE_DIR, filename)
                            with open(file_path, "wb") as f:
                                f.write(audio_resp.content)
                            print(f"‚úÖ [BG] File saved: {file_path}")
                            
                            # Update final status
                            with open(os.path.join(AUDIO_CACHE_DIR, f"{request_id}.status"), "w") as f:
                                f.write(json.dumps({
                                    "status": "complete",
                                    "elapsed": elapsed,
                                    "progress": 100
                                }))
                            return
                        else:
                            error_msg = f"Failed to download audio: {audio_resp.status_code}"
                            print(f"‚ùå [BG] {error_msg}")
                            raise Exception(error_msg)
                    else:
                        error_msg = "No audio URL in completed status"
                        print(f"‚ùå [BG] {error_msg}")
                        raise Exception(error_msg)
                elif status_result.get("status") == "failed":
                    error_msg = f"Generation failed: {status_result.get('error', 'Unknown error')}"
                    print(f"‚ùå [BG] {error_msg}")
                    raise Exception(error_msg)
                else:
                    print(f"‚è≥ [BG] Generation status: {status_result.get('status', 'unknown')}")
        
        error_msg = "Generation timed out after 5 minutes"
        print(f"‚ùå [BG] {error_msg}")
        raise Exception(error_msg)

    except Exception as e:
        print(f"‚ùå [BG] Error in background task {request_id}: {str(e)}")
        with open(os.path.join(AUDIO_CACHE_DIR, f"{request_id}.error"), "w") as f:
            f.write(str(e))
        with open(os.path.join(AUDIO_CACHE_DIR, f"{request_id}.status"), "w") as f:
            f.write(json.dumps({
                "status": "error",
                "error": str(e),
                "elapsed": int(time.time() - start_time) if 'start_time' in locals() else 0
            }))

@router.post("/generate-beat", response_model=GenerateBeatResponse)
async def generate_beat(request: GenerateBeatRequest, background_tasks: BackgroundTasks):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏ —á–µ—Ä–µ–∑ Riffusion.
    """
    try:
        print(f"üéµ Received beat generation request: {request.prompt}")
        
        RIFFUSION_API_KEY = os.getenv("RIFFUSION_API_KEY")
        if not RIFFUSION_API_KEY:
            print("‚ö†Ô∏è RIFFUSION_API_KEY not configured")
            return GenerateBeatResponse(
                success=True, 
                audio_url="/audio_cache/demo_beat.mp3",
                message="Demo mode: RIFFUSION_API_KEY not configured"
            )
            
        request_id = uuid.uuid4().hex
        print(f"üéµ Generated request_id: {request_id}")

        # Create initial status file
        with open(os.path.join(AUDIO_CACHE_DIR, f"{request_id}.status"), "w") as f:
            f.write(json.dumps({
                "status": "starting",
                "elapsed": 0,
                "progress": 0
            }))

        # Start background task
        print(f"üéµ Starting background task for request_id: {request_id}")
        background_tasks.add_task(_run_riffusion_generation, request.prompt, request_id)
        print(f"üéµ Background task added for request_id: {request_id}")

        return GenerateBeatResponse(
            success=True,
            status="pending",
            request_id=request_id,
            message="Generation started. Result will be ready in 30-60 seconds."
        )
    except Exception as e:
        print(f"‚ùå Error in generate_beat endpoint: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Failed to start generation: {str(e)}")

@router.post("/generate-beat/status")
async def check_generation_status(request: GenerateBeatStatusRequest):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏ –ø–æ –Ω–∞–ª–∏—á–∏—é —Ñ–∞–π–ª–∞ –≤ –∫–µ—à–µ.
    """
    request_id = request.request_id
    if not request_id:
        return JSONResponse(status_code=400, content={"success": False, "error": "request_id –Ω–µ —É–∫–∞–∑–∞–Ω"})
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª —Å –æ—à–∏–±–∫–æ–π
    error_file = os.path.join(AUDIO_CACHE_DIR, f"{request_id}.error")
    if os.path.exists(error_file):
        with open(error_file, "r") as f:
            error_msg = f.read()
        return JSONResponse(status_code=500, content={"success": False, "status": "failed", "error": error_msg})
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤—ã–π mp3 —Ñ–∞–π–ª
    success_file = os.path.join(AUDIO_CACHE_DIR, f"{request_id}.mp3")
    if os.path.exists(success_file):
        return JSONResponse(content={
            "success": True, 
            "status": "complete",
            "local_audio_url": f"/audio_cache/{request_id}.mp3"
        })
    
    # –ï—Å–ª–∏ —Ñ–∞–π–ª–æ–≤ –Ω–µ—Ç, –∑–Ω–∞—á–∏—Ç, –µ—â–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
    return JSONResponse(content={"success": True, "status": "pending"})

@router.get("/download-beat/{filename}")
async def download_beat(filename: str):
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –º—É–∑—ã–∫—É
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        if ".." in filename or "/" in filename or "\\" in filename:
            raise HTTPException(status_code=400, detail="–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∏–º—è —Ñ–∞–π–ª–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        file_path = os.path.join(AUDIO_CACHE_DIR, filename)
        if not os.path.exists(file_path):
            raise HTTPException(status_code=404, detail="–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME —Ç–∏–ø
        if filename.endswith('.mp3'):
            media_type = 'audio/mpeg'
        elif filename.endswith('.wav'):
            media_type = 'audio/wav'
        elif filename.endswith('.m4a'):
            media_type = 'audio/mp4'
        else:
            media_type = 'application/octet-stream'
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∞–π–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        return FileResponse(
            path=file_path,
            media_type=media_type,
            filename=f"aivi_generated_music_{filename}",
            headers={"Content-Disposition": f"attachment; filename=aivi_generated_music_{filename}"}
        )
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ {filename}: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞") 