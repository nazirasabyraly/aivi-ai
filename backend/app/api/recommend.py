from fastapi import APIRouter, Query, Response

import requests
import os
import threading
import yt_dlp
import shutil
import subprocess
import sys


router = APIRouter()

YOUTUBE_API_KEY = os.getenv("YOUTUBE_API_KEY")
PROXY_URL = os.getenv("PROXY_URL")  # –§–æ—Ä–º–∞—Ç: http://username:password@ip:port

# –ü—Ä–æ—Å—Ç–æ–π in-memory –∫–µ—à –¥–ª—è YouTube search
youtube_search_cache = {}
youtube_search_cache_lock = threading.Lock()

AUDIO_CACHE_DIR = "audio_cache"
os.makedirs(AUDIO_CACHE_DIR, exist_ok=True)



def get_ydl_options(use_proxy=True, client_type='android_tv'):
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ yt-dlp —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä–æ–∫—Å–∏ –∏ –æ–±—Ö–æ–¥–æ–º –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫"""
    ydl_opts = {
        'format': 'bestaudio[ext=m4a]/bestaudio[ext=webm]/bestaudio/best',
        'quiet': True,  # –í—ã–∫–ª—é—á–∞–µ–º –ª–∏—à–Ω–∏–π –≤—ã–≤–æ–¥
        'no_warnings': True,
        'retries': 1,  # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
        'socket_timeout': 10,  # –£–º–µ–Ω—å—à–∞–µ–º —Ç–∞–π–º–∞—É—Ç
        'user_agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
        'extractor_args': {
            'youtube': {
                'player_client': [client_type],
                'player_skip': ['configs'],
                'skip': ['dash', 'hls']
            }
        },
        'http_chunk_size': 1048576,  # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞
        'fragment_retries': 1,
        'retry_sleep_functions': {'http': lambda n: 1},  # –ë—ã—Å—Ç—Ä—ã–µ –ø–æ–≤—Ç–æ—Ä—ã
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
        'geo_bypass': True,
        'geo_bypass_country': 'US',
        'age_limit': None,
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∫—Å–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
    if use_proxy and PROXY_URL:
        ydl_opts['proxy'] = PROXY_URL
        print(f"üîó –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ–∫—Å–∏ –¥–ª—è {client_type}")
    else:
        print(f"üö´ –ë–µ–∑ –ø—Ä–æ–∫—Å–∏ –¥–ª—è {client_type}")
    
    return ydl_opts



# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è yt-dlp –∏ ffmpeg –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ backend
if shutil.which('yt-dlp') is None:
    print('‚ùå yt-dlp –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install yt-dlp')
else:
    try:
        version = subprocess.check_output(['yt-dlp', '--version'], text=True).strip()
        print(f'‚úÖ yt-dlp version: {version}')
        # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–∏—Ç—å yt-dlp
        try:
            subprocess.check_call([sys.executable, '-m', 'pip', 'install', '--upgrade', 'yt-dlp'])
            print('üîÑ yt-dlp –æ–±–Ω–æ–≤–ª—ë–Ω –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏.')
        except Exception as e:
            print(f'‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å yt-dlp: {e}')
    except Exception as e:
        print(f'‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏—é yt-dlp: {e}')

if shutil.which('ffmpeg') is None:
    print('‚ùå ffmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: brew install ffmpeg (macOS) –∏–ª–∏ apt install ffmpeg (Linux)')
else:
    try:
        ffmpeg_version = subprocess.check_output(['ffmpeg', '-version'], text=True).split('\n')[0]
        print(f'‚úÖ {ffmpeg_version}')
    except Exception as e:
        print(f'‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏—é ffmpeg: {e}')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏
if PROXY_URL:
    print(f'üîó –ü—Ä–æ–∫—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {PROXY_URL[:30]}...')
else:
    print('‚ÑπÔ∏è  –ü—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (PROXY_URL –Ω–µ –∑–∞–¥–∞–Ω)')

# –ó–¥–µ—Å—å –±—É–¥—É—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ YouTube –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ª–∞–π–∫–æ–≤

@router.get("/youtube-search")
def youtube_search(q: str = Query(..., description="–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞, –∞—Ä—Ç–∏—Å—Ç –∏ —Ç.–¥.)"), max_results: int = 5):
    key = f"{q.lower().strip()}_{max_results}"
    with youtube_search_cache_lock:
        if key in youtube_search_cache:
            return {"results": youtube_search_cache[key]}
    if not YOUTUBE_API_KEY:
        return {"error": "YOUTUBE_API_KEY not set"}
    url = "https://www.googleapis.com/youtube/v3/search"
    params = {
        "part": "snippet",
        "q": q,
        "type": "video",
        "maxResults": max_results,
        "key": YOUTUBE_API_KEY
    }
    resp = requests.get(url, params=params)
    if resp.status_code != 200:
        return {"error": f"YouTube API error: {resp.text}"}
    data = resp.json()
    results = []
    for item in data.get("items", []):
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π
            if "id" in item and "snippet" in item:
                video_id = item["id"].get("videoId") if isinstance(item["id"], dict) else item["id"]
                if not video_id:
                    continue
                    
                snippet = item["snippet"]
                thumbnail_url = ""
                if "thumbnails" in snippet:
                    if "medium" in snippet["thumbnails"]:
                        thumbnail_url = snippet["thumbnails"]["medium"]["url"]
                    elif "default" in snippet["thumbnails"]:
                        thumbnail_url = snippet["thumbnails"]["default"]["url"]
                
                results.append({
                    "video_id": video_id,
                    "title": snippet.get("title", "Unknown title"),
                    "channel": snippet.get("channelTitle", "Unknown channel"),
                    "thumbnail": thumbnail_url
                })
        except Exception as e:
            print(f"Error processing YouTube item: {e}")
            continue
    with youtube_search_cache_lock:
        youtube_search_cache[key] = results
    return {"results": results}

@router.get("/youtube-audio")
def youtube_audio(video_id: str):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª (–±–µ–∑ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ mp3)
    filename = None
    ext = None
    # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —É–∂–µ —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –ª—é–±—ã–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
    for possible_ext in ["m4a", "webm", "opus", "mp3"]:
        test_path = f"{AUDIO_CACHE_DIR}/{video_id}.{possible_ext}"
        if os.path.exists(test_path):
            filename = test_path
            ext = possible_ext
            break
    if not filename:
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        ydl_opts = get_ydl_options(use_proxy=False, client_type='android_tv')
        ydl_opts['outtmpl'] = f'{AUDIO_CACHE_DIR}/{video_id}.%(ext)s'
        
        try:
            print(f"[yt-dlp] –°–∫–∞—á–∏–≤–∞–µ–º https://www.youtube.com/watch?v={video_id}")
            
            # –ë—ã—Å—Ç—Ä—ã–µ –ø–æ–ø—ã—Ç–∫–∏ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            attempts = [
                # –ü–æ–ø—ã—Ç–∫–∞ 1: –ë–µ–∑ –ø—Ä–æ–∫—Å–∏ Android TV (–±—ã—Å—Ç—Ä–æ)
                get_ydl_options(use_proxy=False, client_type='android_tv'),
                # –ü–æ–ø—ã—Ç–∫–∞ 2: –ë–µ–∑ –ø—Ä–æ–∫—Å–∏ iOS (–±—ã—Å—Ç—Ä–æ)
                get_ydl_options(use_proxy=False, client_type='ios'),
                # –ü–æ–ø—ã—Ç–∫–∞ 3: –ë–µ–∑ –ø—Ä–æ–∫—Å–∏ Android Creator (–±—ã—Å—Ç—Ä–æ)
                get_ydl_options(use_proxy=False, client_type='android_creator'),
                # –ü–æ–ø—ã—Ç–∫–∞ 4: –° –ø—Ä–æ–∫—Å–∏ Android TV (–º–µ–¥–ª–µ–Ω–Ω–æ, –ø–æ—Å–ª–µ–¥–Ω—è—è –Ω–∞–¥–µ–∂–¥–∞)
                get_ydl_options(use_proxy=True, client_type='android_tv'),
            ]
            
            last_error = None
            for i, attempt_opts in enumerate(attempts, 1):
                try:
                    attempt_opts['outtmpl'] = f'{AUDIO_CACHE_DIR}/{video_id}.%(ext)s'
                    client_type = attempt_opts['extractor_args']['youtube']['player_client'][0]
                    has_proxy = 'proxy' in attempt_opts
                    print(f"–ü–æ–ø—ã—Ç–∫–∞ {i}: {client_type} {'—Å –ø—Ä–æ–∫—Å–∏' if has_proxy else '–±–µ–∑ –ø—Ä–æ–∫—Å–∏'}")
                    
                    with yt_dlp.YoutubeDL(attempt_opts) as ydl:
                        result = ydl.extract_info(f"https://www.youtube.com/watch?v={video_id}", download=True)
                        ext = result.get('ext', 'm4a')
                        filename = f"{AUDIO_CACHE_DIR}/{video_id}.{ext}"
                        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ —Å –ø–æ–ø—ã—Ç–∫–∏ {i} ({client_type})")
                        break
                except Exception as e:
                    last_error = e
                    error_short = str(e)[:100]
                    print(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ {i} –Ω–µ —É–¥–∞–ª–∞—Å—å: {error_short}...")
                    
                    # –ï—Å–ª–∏ –ø—Ä–æ–∫—Å–∏ –º–µ–¥–ª–µ–Ω–Ω—ã–π, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ —Å –ø—Ä–æ–∫—Å–∏
                    if "timed out" in str(e).lower() and has_proxy:
                        print("üö´ –ü—Ä–æ–∫—Å–∏ —Å–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω—ã–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ —Å –ø—Ä–æ–∫—Å–∏")
                        break
                    continue
            else:
                # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å
                raise last_error
                    
        except Exception as e:
            error_msg = str(e)
            print(f"yt-dlp error for video_id={video_id}: {error_msg}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
            if "Sign in to confirm you're not a bot" in error_msg:
                error_response = '{"error": "YouTube –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –¥–æ—Å—Ç—É–ø. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –≤–∏–¥–µ–æ."}'
            elif "Failed to extract any player response" in error_msg:
                error_response = '{"error": "YouTube –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –≤–∏–¥–µ–æ."}'
            elif "proxy" in error_msg.lower() or "connection" in error_msg.lower():
                if PROXY_URL:
                    print(f"‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–æ–∫—Å–∏: {PROXY_URL[:30]}...")
                    error_response = '{"error": "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ PROXY_URL."}'
                else:
                    print("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ–∫—Å–∏.")
                    error_response = '{"error": "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ YouTube. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ–∫—Å–∏."}'
            else:
                error_response = f'{{"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞—É–¥–∏–æ. YouTube –º–æ–∂–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø."}}'
            
            import traceback
            print(traceback.format_exc())
            return Response(content=error_response, media_type="application/json", status_code=400)
    if not filename or not os.path.exists(filename):
        print(f"File not found after yt-dlp for video_id={video_id}")
        return Response(content='{"error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∞—É–¥–∏–æ —Å YouTube. –í–æ–∑–º–æ–∂–Ω–æ, –≤–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ."}', media_type="application/json", status_code=400)
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º mime-type –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
    mime_map = {
        "m4a": "audio/mp4",
        "webm": "audio/webm",
        "opus": "audio/ogg",
        "mp3": "audio/mpeg",
    }
    mime_type = mime_map.get(ext, "application/octet-stream")
    with open(filename, "rb") as f:
        audio_data = f.read()
    return Response(content=audio_data, media_type=mime_type)


