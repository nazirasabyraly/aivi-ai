// src/pages/Login.tsx

import React, { useState, useEffect } from 'react'
import { useNavigate } from 'react-router-dom'
import './login.css'
import { API_BASE_URL } from '../config'
import { useTranslation } from 'react-i18next'

const Login = () => {
  const navigate = useNavigate()
  const { t, ready } = useTranslation()
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [username, setUsername] = useState('')
  const [verificationCode, setVerificationCode] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState('')
  const [message, setMessage] = useState('')
  const [showManualLogin, setShowManualLogin] = useState(false) // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—ã–±–æ—Ä
  const [isRegistering, setIsRegistering] = useState(false)
  const [needsVerification, setNeedsVerification] = useState(false)
  const [verificationEmail, setVerificationEmail] = useState('')
  
  // –í–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ Google OAuth, –æ—Ç–∫–ª—é—á–∞–µ–º email
  const enableGoogleOAuth = true;
  const enableEmailAuth = false;

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ Google OAuth
  const handleGoogleAuth = () => {
    // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ backend endpoint –¥–ª—è Google OAuth
    window.location.href = `${API_BASE_URL}/auth/google`;
    console.log(`${API_BASE_URL}/auth/google`)
  };

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ URL –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ (–¥–ª—è OAuth callback)
  useEffect(() => {
    const urlParams = new URLSearchParams(window.location.search);
    const token = urlParams.get('token');
    const error = urlParams.get('error');
    
    if (token) {
      localStorage.setItem('auth_token', token);
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      fetch(`${API_BASE_URL}/auth/verify`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      })
      .then(response => response.json())
      .then(data => {
        if (data.valid) {
          navigate('/dashboard');
        }
      })
      .catch(() => {
        setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞');
      });
    } else if (error) {
      switch (error) {
        case 'oauth_error':
          setError('–û—à–∏–±–∫–∞ OAuth –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
          break;
        case 'csrf_error':
          setError('–û—à–∏–±–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑');
          break;
        case 'oauth_failed':
          setError('–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Google');
          break;
        default:
          setError('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
      }
    }
  }, [navigate]);

  const handleManualAuth = async (e: React.FormEvent) => {
    e.preventDefault()
    setIsLoading(true)
    setError('')
    setMessage('')

    if (!email || !password || (isRegistering && !username)) {
      setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è')
      setIsLoading(false)
      return
    }

    try {
      const endpoint = isRegistering ? '/users/register' : '/users/login'
      const requestData = isRegistering 
        ? { email, username, password }
        : { email, password }

      console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å:', endpoint, { email, username: username || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ' })

      const response = await fetch(`${API_BASE_URL}${endpoint}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestData)
      })

      const data = await response.json()
      console.log('–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç:', response.status, data)

      if (response.status === 201 && data.detail?.requires_verification) {
        setNeedsVerification(true)
        setVerificationEmail(data.detail.email)
        setMessage(data.detail.message)
      } else if (response.ok && data.access_token) {
        localStorage.setItem('auth_token', data.access_token)
        localStorage.setItem('user_info', JSON.stringify(data.user))
        navigate('/dashboard')
      } else if (response.status === 403) {
        if (data.detail?.requires_verification) {
          setNeedsVerification(true)
          setVerificationEmail(data.detail.email)
          setError('–î–ª—è –≤—Ö–æ–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å email –∞–¥—Ä–µ—Å')
        } else {
          setError(data.detail || '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å')
        }
      } else if (response.status === 404) {
        setError('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ email –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å')
      } else if (response.status === 400) {
        setError(data.detail || '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')
      } else {
        setError(data.detail || '–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏')
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏:', error)
      setError('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É')
    } finally {
      setIsLoading(false)
    }
  }

  const handleEmailVerification = async (e: React.FormEvent) => {
    e.preventDefault()
    setIsLoading(true)
    setError('')

    if (!verificationCode) {
      setError('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è')
      setIsLoading(false)
      return
    }

    try {
      const response = await fetch(`${API_BASE_URL}/users/verify-email`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          email: verificationEmail,
          verification_code: verificationCode
        })
      })

      const data = await response.json()

      if (response.ok) {
        localStorage.setItem('auth_token', data.access_token)
        localStorage.setItem('user_info', JSON.stringify(data.user))
        navigate('/dashboard')
      } else {
        setError(data.detail || '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è')
      }
    } catch (error) {
      setError('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É')
    } finally {
      setIsLoading(false)
    }
  }

  const handleResendCode = async () => {
    setIsLoading(true)
    setError('')
    setMessage('')

    try {
      const response = await fetch(`${API_BASE_URL}/users/resend-verification`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          email: verificationEmail
        })
      })

      const data = await response.json()

      if (response.ok) {
        setMessage('–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–∞ –≤–∞—à email!')
      } else {
        setError(data.detail || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞')
      }
    } catch (error) {
      setError('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É')
    } finally {
      setIsLoading(false)
    }
  }

  const handleBackToLogin = () => {
    setShowManualLogin(false)
    setNeedsVerification(false)
    setVerificationCode('')
    setError('')
    setMessage('')
  }

  // –ï—Å–ª–∏ email –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ Google
  const shouldShowManualLogin = enableEmailAuth && showManualLogin;

  // Show loading screen while i18n initializes
  if (!ready) {
    return (
      <div className="login-container">
        <div className="login-card">
          <div className="login-header">
            <h1>üéµ Aivi</h1>
            <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>
          </div>
        </div>
      </div>
    );
  }

  if (needsVerification) {
    return (
      <div className="login-container">
        <div className="login-card">
          <div className="login-header">
            <h1>üìß Email Verification</h1>
            <p>–ú—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ {verificationEmail}</p>
          </div>

          <form onSubmit={handleEmailVerification} className="login-form">
            <div className="form-group">
              <label htmlFor="verification_code">–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</label>
              <input
                type="text"
                id="verification_code"
                value={verificationCode}
                onChange={(e) => setVerificationCode(e.target.value)}
                placeholder="–í–≤–µ–¥–∏—Ç–µ 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥"
                maxLength={6}
                required
              />
            </div>
            {error && <div className="error-message">{error}</div>}
            {message && <div className="success-message">{message}</div>}
            <div className="form-actions">
              <button
                type="submit"
                disabled={isLoading}
                className="login-submit-btn"
              >
                {isLoading ? '–ü—Ä–æ–≤–µ—Ä—è–µ–º...' : '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'}
              </button>
              <button
                type="button"
                onClick={handleResendCode}
                disabled={isLoading}
                className="toggle-btn"
              >
                –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ
              </button>
              <button
                type="button"
                onClick={handleBackToLogin}
                className="back-btn"
              >
                ‚Üê –ù–∞–∑–∞–¥ –∫ –≤—Ö–æ–¥—É
              </button>
            </div>
          </form>
        </div>
      </div>
    )
  }

  return (
    <div className="login-container">
      <div className="login-card">
        <div className="login-header">
          <h1>üéµ Aivi</h1>
          <p>{t('welcome') || '–ê–Ω–∞–ª–∏–∑ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ –≤–∫—É—Å–∞ –∏ –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫'}</p>
        </div>

        {!shouldShowManualLogin ? (
          <div className="login-options">
            {enableGoogleOAuth && (
              <div className="google-signin-wrapper">
                <button
                  onClick={handleGoogleAuth}
                  className="google-signin-btn"
                  type="button"
                >
                  <svg className="google-icon" viewBox="0 0 24 24">
                    <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
                    <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
                    <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
                    <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
                  </svg>
                  –í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Google
                </button>
              </div>
            )}
            {enableEmailAuth && (
              <>
                <div className="or-divider">
                  <span>–∏–ª–∏</span>
                </div>
                <button
                  onClick={() => setShowManualLogin(true)}
                  className="manual-login-btn"
                >
                  {t('register_login') || '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è / –í—Ö–æ–¥ —á–µ—Ä–µ–∑ Email'}
                </button>
              </>
            )}
          </div>
        ) : (
          <form onSubmit={handleManualAuth} className="login-form">
            {isRegistering && (
              <div className="form-group">
                <label htmlFor="username">{t('username') || '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'}</label>
                <input
                  type="text"
                  id="username"
                  value={username}
                  onChange={(e) => setUsername(e.target.value)}
                  placeholder={t('enter_username') || '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'}
                  required
                />
              </div>
            )}
            <div className="form-group">
              <label htmlFor="email">Email</label>
              <input
                type="email"
                id="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                placeholder="your-email@example.com"
                required
              />
            </div>
            <div className="form-group">
              <label htmlFor="password">{t('password') || '–ü–∞—Ä–æ–ª—å'}</label>
              <input
                type="password"
                id="password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                placeholder={t('enter_password') || '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å'}
                required
              />
            </div>
            {error && <div className="error-message">{error}</div>}
            {message && <div className="success-message">{message}</div>}
            <div className="form-actions">
              <button
                type="submit"
                disabled={isLoading}
                className="login-submit-btn"
              >
                {isLoading ? (t('processing') || '–û–±—Ä–∞–±–æ—Ç–∫–∞...') : (isRegistering ? (t('register') || '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è') : (t('login') || '–í–æ–π—Ç–∏'))}
              </button>
              <button
                type="button"
                onClick={() => setIsRegistering(!isRegistering)}
                className="toggle-btn"
              >
                {isRegistering ? (t('already_have_account') || '–£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç? –í–æ–π—Ç–∏') : (t('no_account') || '–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞? –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è')}
              </button>
              <button
                type="button"
                onClick={handleBackToLogin}
                className="back-btn"
              >
                ‚Üê {t('back') || '–ù–∞–∑–∞–¥'}
              </button>
            </div>
          </form>
        )}

        <div className="login-info">
          <h3>üöÄ {t('what_can_do') || '–ß—Ç–æ —É–º–µ–µ—Ç Aivi?'}</h3>
          <ul>
            <li>üìä {t('analyze_music') || '–ê–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ –≤–∫—É—Å–∞'}</li>
            <li>ü§ñ {t('ai_chat') || '–ò–ò-—á–∞—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ'}</li>
            <li>üéµ {t('music_recommend') || '–ü–æ–¥–±–æ—Ä –º—É–∑—ã–∫–∏ –ø–æ–¥ –≤–∞—à –∫–æ–Ω—Ç–µ–Ω—Ç'}</li>
            <li>üì± {t('modern_ui') || '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å'}</li>
            <li>üîê {t('secure_login') || '–ë—ã—Å—Ç—Ä—ã–π –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ Google'}</li>
          </ul>
        </div>
      </div>
    </div>
  )
}

export default Login
