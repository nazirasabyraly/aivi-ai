// src/pages/Login.tsx

import React, { useState, useEffect } from 'react'
import { useNavigate } from 'react-router-dom'
import './login.css'
import { API_BASE_URL } from '../config'
import { useTranslation } from 'react-i18next'
import { useUser } from '@clerk/clerk-react'
import ClerkAuth from '../components/ClerkAuth'

const Login = () => {
  const navigate = useNavigate()
  const { t, ready } = useTranslation()
  const { user } = useUser() // Clerk user
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [username, setUsername] = useState('')
  const [verificationCode, setVerificationCode] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState('')
  const [message, setMessage] = useState('')
  const [showManualLogin, setShowManualLogin] = useState(false) // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—ã–±–æ—Ä
  const [isRegistering, setIsRegistering] = useState(false)
  const [needsVerification, setNeedsVerification] = useState(false)
  const [verificationEmail, setVerificationEmail] = useState('')
  const [authMethod, setAuthMethod] = useState<'none' | 'google' | 'clerk' | 'manual'>('clerk') // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Clerk —Å—Ä–∞–∑—É

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–µ–∂–∏–º–∞
  React.useEffect(() => {
    const urlParams = new URLSearchParams(window.location.search)
    const mode = urlParams.get('mode')
    if (mode === 'sign-up') {
      setIsRegistering(true)
      setAuthMethod('clerk')
    } else if (mode === 'sign-in') {
      setIsRegistering(false)
      setAuthMethod('clerk')
    }
  }, [])
  
  // –í–∫–ª—é—á–∞–µ–º –≤—Å–µ –º–µ—Ç–æ–¥—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  const enableGoogleOAuth = false; // –û—Ç–∫–ª—é—á–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π Google OAuth
  const enableClerkAuth = true; // Clerk –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏ Google –∏ Email
  const enableEmailAuth = false; // –ü–æ–∫–∞ –æ—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ä—ã–π email auth

  // Google OAuth —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ Clerk

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º Clerk –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    if (user) {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω —á–µ—Ä–µ–∑ Clerk
      navigate('/dashboard');
    }
  }, [user, navigate]);

  // Clerk –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç OAuth –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, —Å—Ç–∞—Ä—ã–µ callback –∫–æ–¥—ã –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã

  const handleManualAuth = async (e: React.FormEvent) => {
    e.preventDefault()
    setIsLoading(true)
    setError('')
    setMessage('')

    if (!email || !password || (isRegistering && !username)) {
      setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è')
      setIsLoading(false)
      return
    }

    try {
      const endpoint = isRegistering ? '/users/register' : '/users/login'
      const requestData = isRegistering 
        ? { email, username, password }
        : { email, password }

      console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å:', endpoint, { email, username: username || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ' })

      const response = await fetch(`${API_BASE_URL}${endpoint}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestData)
      })

      const data = await response.json()
      console.log('–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç:', response.status, data)

      if (response.status === 201 && data.detail?.requires_verification) {
        setNeedsVerification(true)
        setVerificationEmail(data.detail.email)
        setMessage(data.detail.message)
      } else if (response.ok && data.access_token) {
        localStorage.setItem('auth_token', data.access_token)
        localStorage.setItem('user_info', JSON.stringify(data.user))
        navigate('/dashboard')
      } else if (response.status === 403) {
        if (data.detail?.requires_verification) {
          setNeedsVerification(true)
          setVerificationEmail(data.detail.email)
          setError('–î–ª—è –≤—Ö–æ–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å email –∞–¥—Ä–µ—Å')
        } else {
          setError(data.detail || '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å')
        }
      } else if (response.status === 404) {
        setError('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ email –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å')
      } else if (response.status === 400) {
        setError(data.detail || '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')
      } else {
        setError(data.detail || '–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏')
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏:', error)
      setError('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É')
    } finally {
      setIsLoading(false)
    }
  }

  const handleEmailVerification = async (e: React.FormEvent) => {
    e.preventDefault()
    setIsLoading(true)
    setError('')

    if (!verificationCode) {
      setError('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è')
      setIsLoading(false)
      return
    }

    try {
      const response = await fetch(`${API_BASE_URL}/users/verify-email`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          email: verificationEmail,
          verification_code: verificationCode
        })
      })

      const data = await response.json()

      if (response.ok) {
        localStorage.setItem('auth_token', data.access_token)
        localStorage.setItem('user_info', JSON.stringify(data.user))
        navigate('/dashboard')
      } else {
        setError(data.detail || '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è')
      }
    } catch (error) {
      setError('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É')
    } finally {
      setIsLoading(false)
    }
  }

  const handleResendCode = async () => {
    setIsLoading(true)
    setError('')
    setMessage('')

    try {
      const response = await fetch(`${API_BASE_URL}/users/resend-verification`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          email: verificationEmail
        })
      })

      const data = await response.json()

      if (response.ok) {
        setMessage('–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–∞ –≤–∞—à email!')
      } else {
        setError(data.detail || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞')
      }
    } catch (error) {
      setError('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É')
    } finally {
      setIsLoading(false)
    }
  }

  const handleBackToLogin = () => {
    setShowManualLogin(false)
    setNeedsVerification(false)
    setVerificationCode('')
    setError('')
    setMessage('')
  }

  // –ï—Å–ª–∏ email –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ Google
  const shouldShowManualLogin = enableEmailAuth && showManualLogin;

  // Show loading screen while i18n initializes
  if (!ready) {
    return (
      <div className="login-container">
        <div className="login-card">
          <div className="login-header">
            <h1>üéµ Aivi</h1>
            <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>
          </div>
        </div>
      </div>
    );
  }

  if (needsVerification) {
    return (
      <div className="login-container">
        <div className="login-card">
          <div className="login-header">
            <h1>üìß Email Verification</h1>
            <p>–ú—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ {verificationEmail}</p>
          </div>

          <form onSubmit={handleEmailVerification} className="login-form">
            <div className="form-group">
              <label htmlFor="verification_code">–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</label>
              <input
                type="text"
                id="verification_code"
                value={verificationCode}
                onChange={(e) => setVerificationCode(e.target.value)}
                placeholder="–í–≤–µ–¥–∏—Ç–µ 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥"
                maxLength={6}
                required
              />
            </div>
            {error && <div className="error-message">{error}</div>}
            {message && <div className="success-message">{message}</div>}
            <div className="form-actions">
              <button
                type="submit"
                disabled={isLoading}
                className="login-submit-btn"
              >
                {isLoading ? '–ü—Ä–æ–≤–µ—Ä—è–µ–º...' : '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'}
              </button>
              <button
                type="button"
                onClick={handleResendCode}
                disabled={isLoading}
                className="toggle-btn"
              >
                –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ
              </button>
              <button
                type="button"
                onClick={handleBackToLogin}
                className="back-btn"
              >
                ‚Üê –ù–∞–∑–∞–¥ –∫ –≤—Ö–æ–¥—É
              </button>
            </div>
          </form>
        </div>
      </div>
    )
  }

  return (
    <div className="login-container">
      <div className="login-card">
        <div className="login-header">
          <h1>üéµ Aivi</h1>
          <p>{t('welcome') || '–ê–Ω–∞–ª–∏–∑ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ –≤–∫—É—Å–∞ –∏ –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫'}</p>
        </div>

                {authMethod === 'clerk' ? (
          <div className="clerk-auth-container">
            <ClerkAuth 
              mode={isRegistering ? 'sign-up' : 'sign-in'} 
              onSuccess={() => navigate('/dashboard')}
            />
            <div className="auth-actions">
              <button
                type="button"
                onClick={() => setIsRegistering(!isRegistering)}
                className="toggle-btn"
              >
                {isRegistering ? '–£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç? –í–æ–π—Ç–∏' : '–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞? –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'}
              </button>
              {enableEmailAuth && (
                <button
                  type="button"
                  onClick={() => setAuthMethod('manual')}
                  className="back-btn"
                >
                  üîÑ –°—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–± –≤—Ö–æ–¥–∞
                </button>
              )}
            </div>
          </div>
        ) : (
          <form onSubmit={handleManualAuth} className="login-form">
            {isRegistering && (
              <div className="form-group">
                <label htmlFor="username">{t('username') || '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'}</label>
                <input
                  type="text"
                  id="username"
                  value={username}
                  onChange={(e) => setUsername(e.target.value)}
                  placeholder={t('enter_username') || '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'}
                  required
                />
              </div>
            )}
            <div className="form-group">
              <label htmlFor="email">Email</label>
              <input
                type="email"
                id="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                placeholder="your-email@example.com"
                required
              />
            </div>
            <div className="form-group">
              <label htmlFor="password">{t('password') || '–ü–∞—Ä–æ–ª—å'}</label>
              <input
                type="password"
                id="password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                placeholder={t('enter_password') || '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å'}
                required
              />
            </div>
            {error && <div className="error-message">{error}</div>}
            {message && <div className="success-message">{message}</div>}
            <div className="form-actions">
              <button
                type="submit"
                disabled={isLoading}
                className="login-submit-btn"
              >
                {isLoading ? (t('processing') || '–û–±—Ä–∞–±–æ—Ç–∫–∞...') : (isRegistering ? (t('register') || '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è') : (t('login') || '–í–æ–π—Ç–∏'))}
              </button>
              <button
                type="button"
                onClick={() => setIsRegistering(!isRegistering)}
                className="toggle-btn"
              >
                {isRegistering ? (t('already_have_account') || '–£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç? –í–æ–π—Ç–∏') : (t('no_account') || '–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞? –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è')}
              </button>
              <button
                type="button"
                onClick={() => setAuthMethod('clerk')}
                className="back-btn"
              >
                ‚Üê –ù–∞–∑–∞–¥ –∫ Clerk
              </button>
            </div>
          </form>
        )}

        <div className="login-info">
          <h3>üöÄ {t('what_can_do') || '–ß—Ç–æ —É–º–µ–µ—Ç Aivi?'}</h3>
          <ul>
            <li>üìä {t('analyze_music') || '–ê–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ –≤–∫—É—Å–∞'}</li>
            <li>ü§ñ {t('ai_chat') || '–ò–ò-—á–∞—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ'}</li>
            <li>üéµ {t('music_recommend') || '–ü–æ–¥–±–æ—Ä –º—É–∑—ã–∫–∏ –ø–æ–¥ –≤–∞—à –∫–æ–Ω—Ç–µ–Ω—Ç'}</li>
            <li>üì± {t('modern_ui') || '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å'}</li>
            <li>üîê {t('secure_login') || '–ë—ã—Å—Ç—Ä—ã–π –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ Google'}</li>
          </ul>
        </div>
      </div>
    </div>
  )
}

export default Login
